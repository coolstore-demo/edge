---
- name: Create a disk mapped from a RHEL-9 image for rhel
  google.cloud.gcp_compute_disk:
    name: rhel1d
    size_gb: 50
    source_image: "projects/rhel-cloud/global/images/rhel-8-v20230202"
    zone: "{{ gcp_zone }}"
    project: "{{ gcp_project }}"
    auth_kind: serviceaccount
    state: present
  register: diskrhel

- name: Create a Google Virtual Private Cloud (VPC) network
  google.cloud.gcp_compute_network:
    name: network-instance
    auto_create_subnetworks: 'false'
    project: "{{ gcp_project }}"
    auth_kind: serviceaccount
    state: present
  register: network

- name: Create a subnetwork
  google.cloud.gcp_compute_subnetwork:
    name: instancenet
    region: us-east1
    network: "{{ network }}"
    ip_cidr_range: 172.16.0.0/16
    project: "{{ gcp_project }}"
    auth_kind: serviceaccount
    state: present
  register: vpcsubnet

- name: Create a firewall rule to allow SSH
  google.cloud.gcp_compute_firewall:
    name: allowssh
    allowed:
      - ip_protocol: tcp
        ports:
          - '22'
          - '80'
          - '443'
          - '8080'
          - '8090'
          - '9000'
    project: "{{ gcp_project }}"
    network: "{{ network }}"
    auth_kind: serviceaccount
    state: present
  register: sshallowed

- name: Create an IPv4 public IP address for rhel
  google.cloud.gcp_compute_address:
    name: rhel1ip
    region: "{{ gcp_region }}"
    project: "{{ gcp_project }}"
    auth_kind: serviceaccount
    state: present
  register: rhelip

- name: Create the demo-rhel VM instances
  google.cloud.gcp_compute_instance:
    name: demo-rhel
    machine_type: n1-standard-1
    disks:
      - auto_delete: 'true'
        boot: 'true'
        source: "{{ diskrhel }}"
      - auto_delete: 'true'
        interface: NVME
        type: SCRATCH
        initialize_params:
          disk_type: local-ssd
    labels:
      environment: production
    network_interfaces:
      - network: "{{ network }}"
        access_configs:
          - name: External NAT
            nat_ip: "{{ rhelip }}"
            type: ONE_TO_ONE_NAT
        subnetwork: "{{ vpcsubnet }}"
    zone: "{{ gcp_zone }}"
    project: "{{ gcp_project }}"
    auth_kind: serviceaccount
    state: present
  register: gcp_node_info

- name: debug node info
  debug:
    msg: "{{ gcp_node_info }}"

- name: flatten object
  ansible.builtin.set_fact:
    paths: "{{ lookup('ansible.utils.to_paths', gcp_node_info) }}"

- name: Wait for SSH to respond
  ansible.builtin.wait_for:
    host: "{{ paths['networkInterfaces[0].accessConfigs[0].natIP'] }}"
    port: 22
    state: started
